# 5. Development with ROS

## Assignments

These assignments require you to understand many different aspects of
the development workflow to perform. Feel free to (i) reach out for
help when you are working on them and (ii) contribute to the
documentation site afterward.

### 1: ROS Environment

Create a Docker development environment and then create a catkin
workspace. Develop a ROS package that has both Python and C++ nodes
and build it.

Commands used: 
    docker pull ros
    docker run -it ros
    
    mkdir -p ~/catkin_ws/src
    catkin_init_workspace
    cd ~/catkin_ws/
    source devel/setup.bash
    catkin_make
    cd ~/catkin_ws/src
    catkin_create_pkg task1_package std_msgs rospy roscpp
    catkin_make
    source devel/setup.bash
    
    #created a file.cpp in tasks1_package/src folder
    #made relevant changes in the CMakeLists.txt [added an executable (add_executable) named task1__pakage_node with the source file named src/file.cpp.       Also within the CMakeLists.txt, make sure your new vision_node executable gets linked (target_link_libraries) to the catkin libraries.] 
    

### 2: Python library

In the ROS package, develop a library that has this simple function:

```python
def add(x, y):
    return x + y
```

Show that you can create **another** package that produces a Python
node that uses this function.

### 3: A simple ROS Node

Extend the above two packages to build a node that satisfies the
following requirements:

- read from the ROS parameter server a parameter called `gain`;
- provide a service that accepts two numbers, and return the value
  calculated by this equation `gain * (x + y)`;
- provides a service, that when the user calls, toggles the node to
  publish a ROS topic. The thread should be running at 100hz.

### 4: Deployment

Develop a build system using `pyinvoke` that build the two ROS
packages and copy the build artifacts into another Docker image. This
image should be named `super-ros-node`.

When this docker image is ran using the below command, the node
developed in Part 3 should be running.

```sh
docker run super-ros-node
```
